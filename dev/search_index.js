var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QEDprocesses","category":"page"},{"location":"#QEDprocesses","page":"Home","title":"QEDprocesses","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QEDprocesses.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QEDprocesses]","category":"page"},{"location":"#QEDprocesses.Compton","page":"Home","title":"QEDprocesses.Compton","text":"Compton(\n    in_spin [= AllSpin()]\n    in_pol [= AllPol()]\n    out_spin [= AllSpin()]\n    out_pol [= AllPol()]\n)\n\n\n\n\n\n","category":"type"},{"location":"#QEDbase._averaging_norm-Tuple{Compton}","page":"Home","title":"QEDbase._averaging_norm","text":"_averaging_norm(proc::Compton)\n\nnote: Convention\nWe average over the initial spins and pols, and sum over final.\n\n\n\n\n\n","category":"method"},{"location":"#QEDbase.in_phase_space_dimension-Tuple{QEDbase.AbstractProcessDefinition, PerturbativeQED}","page":"Home","title":"QEDbase.in_phase_space_dimension","text":"in_phase_space_dimension(proc::AbstractProcessDefinition, ::PerturbativeQED)\n\nReturn the number of degrees of freedom to determine the incoming phase space for processes in PerturbativeQED. \n\nnote: Convention\nThe current implementation only supports the case where two of the incoming particles collide head-on. \n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses._base_component_type-Union{Tuple{AbstractArray{LV}}, Tuple{LV}} where LV<:QEDbase.AbstractLorentzVector","page":"Home","title":"QEDprocesses._base_component_type","text":"_base_component_type(array_of_lv::AbstractArray{LV}) where {LV<:AbstractLorentzVector}\n\nReturn the type of the components of given Lorentz vectors, which are by themself elements of an  AbstractArray.\n\nExamples\n\njulia> using QEDbase\njulia> using QEDprocesses\njulia> v = Vector{SFourMomentum}(undef,10)\njulia> QEDprocesses._base_component_type(v)\nFloat64\n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses.differential_cross_section-Tuple{QEDcore.PhaseSpacePoint}","page":"Home","title":"QEDprocesses.differential_cross_section","text":"differential_cross_section(phase_space_point::PhaseSpacePoint)\n\nIf the given phase spaces are physical, return differential cross section evaluated on a phase space point. Zero otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses.differential_probability-Tuple{QEDcore.PhaseSpacePoint}","page":"Home","title":"QEDprocesses.differential_probability","text":"differential_probability(phase_space_point::PhaseSpacePoint)\n\nIf the given phase spaces are physical, return differential probability evaluated on a phase space point. Zero otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses.total_cross_section-Tuple{QEDcore.InPhaseSpacePoint}","page":"Home","title":"QEDprocesses.total_cross_section","text":"total_cross_section(in_psp::InPhaseSpacePoint)\n\nReturn the total cross section for a given QEDcore.InPhaseSpacePoint.\n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses.total_probability-Tuple{QEDcore.InPhaseSpacePoint}","page":"Home","title":"QEDprocesses.total_probability","text":"total_probability(in_psp::InPhaseSpacePoint)\n\nReturn the total probability of a given QEDcore.InPhaseSpacePoint.\n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses.unsafe_differential_cross_section-Tuple{QEDcore.PhaseSpacePoint}","page":"Home","title":"QEDprocesses.unsafe_differential_cross_section","text":"unsafe_differential_cross_section(phase_space_point::PhaseSpacePoint)\n\nReturn the differential cross section evaluated on a phase space point without checking if the given phase space is physical.\n\n\n\n\n\n","category":"method"},{"location":"#QEDprocesses.unsafe_differential_probability-Tuple{QEDcore.PhaseSpacePoint}","page":"Home","title":"QEDprocesses.unsafe_differential_probability","text":"unsafe_differential_probability(phase_space_point::PhaseSpacePoint)\n\nReturn differential probability evaluated on a phase space point without checking if the given phase space(s) are physical.\n\n\n\n\n\n","category":"method"}]
}
